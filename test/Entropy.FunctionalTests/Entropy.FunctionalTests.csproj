<Project Sdk="Microsoft.NET.Sdk">

  <Import Project="..\..\build\common.props" />

  <PropertyGroup>
    <TargetFrameworks>netcoreapp2.0;net46</TargetFrameworks>
    <TargetFrameworks Condition=" '$(OS)' != 'Windows_NT' ">netcoreapp2.0</TargetFrameworks>

    <DefineConstants Condition="'$(GenerateBaselines)'=='true'">$(DefineConstants);GENERATE_BASELINES</DefineConstants>
    <DefineConstants>$(DefineConstants);__RemoveThisBitTo__GENERATE_BASELINES</DefineConstants>

    <!-- set explicitly because some tests depend on this -->
    <RootNamespace>Entropy.FunctionalTests</RootNamespace>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' != 'netcoreapp2.0' ">
    <!-- Work around https://github.com/dotnet/sdk/issues/926. Align with bitness of the web site projects. -->
    <PlatformTarget>x86</PlatformTarget>

    <!--
      Work around https://github.com/Microsoft/vstest/issues/428 aka https://github.com/aspnet/Mvc/issues/5873.
      Create the appropriate binding redirects.
    -->
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Include="resources\**\*" />
    <Content Include="nginx.conf" CopyToOutputDirectory="PreserveNewest" />
    <None Include="xunit.runner.json" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\samples\Antiforgery.Angular1\Antiforgery.Angular1.csproj" />
    <ProjectReference Include="..\..\samples\Antiforgery.MvcWithAuthAndAjax\Antiforgery.MvcWithAuthAndAjax.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.ActionConstraintSample.Web\Mvc.ActionConstraintSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.CustomRouteSample.Web\Mvc.CustomRouteSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.CustomRoutingConvention\Mvc.CustomRoutingConvention.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.EmbeddedViewSample.Web\Mvc.EmbeddedViewSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.FormatFilterSample.Web\Mvc.FormatFilterSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.GenericControllers\Mvc.GenericControllers.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.InlineConstraintSample.Web\Mvc.InlineConstraintSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.JsonPatchSample.Web\Mvc.JsonPatchSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.RenderViewToString\Mvc.RenderViewToString.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.SubAreaSample.Web\Mvc.SubAreaSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.TagHelperSample.Web\Mvc.TagHelperSample.Web.csproj" />
    <ProjectReference Include="..\..\samples\Mvc.UrlHelperSample.Web\Mvc.UrlHelperSample.Web.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Hosting" Version="$(AspNetCoreVersion)" />
    <PackageReference Include="Microsoft.AspNetCore.Server.IntegrationTesting" Version="$(AspNetIntegrationTestingVersion)" />
    <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="$(AspNetCoreVersion)" />
    <PackageReference Include="Microsoft.AspNetCore.Testing" Version="$(AspNetCoreVersion)" />
    <PackageReference Include="Microsoft.Extensions.Logging.Testing" Version="$(AspNetCoreVersion)" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="$(TestSdkVersion)" />
    <PackageReference Include="xunit" Version="$(XunitVersion)" />
    <PackageReference Include="xunit.runner.visualstudio" Version="$(XunitVersion)" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net46' ">
    <ProjectReference Include="..\..\samples\Mvc.LocalizationSample.Web\Mvc.LocalizationSample.Web.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{82a7f48d-3b50-4b1e-b82e-3ada8210c358}" />
  </ItemGroup>

  <!--
   Our functional tests utilize DependencyContext.Load which looks next to a dll for a deps.json. For each of our test
   applications they need to have their corresponding deps.json placed next to their .dll in order to work.
   -->
  <Target Name="CopyDepsFiles" AfterTargets="Build" Condition="'$(TargetFramework)'!=''">
    <ItemGroup>
      <DepsFilePaths Include="$([System.IO.Path]::ChangeExtension('%(_ResolvedProjectReferencePaths.FullPath)', '.deps.json'))" />
    </ItemGroup>

    <Copy SourceFiles="%(DepsFilePaths.FullPath)" DestinationFolder="$(OutputPath)" Condition="Exists('%(DepsFilePaths.FullPath)')" />
  </Target>

</Project>
